<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConVMSVehicleTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConVMSVehicleTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializing the values
    /// </summary>
    public void initValue()
    {
        super();
        ConVMSParameters parm = ConVMSParameters::Find();
        this.VehicleGroupId = parm.DefaultVehicleGroupId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>Find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vehicle record in the ConVMSVehicleTable by its ID.
    /// </summary>
    /// <param name="_vehicleId">The ID of the vehicle to find.</param>
    /// <param name="_forUpdate">Indicates whether the record should be locked for update. Default is false.</param>
    /// <returns>
    /// A ConVMSVehicleTable record that matches the provided vehicle ID.
    /// If no record is found, returns null.
    /// </returns>
    public static ConVMSVehicleTable Find(ConVMSVehicleId _vehicleId, boolean _forUpdate = false)
    {
        ConVMSVehicleTable VehicleTable;
        if (_vehicleId != '')
        {
            VehicleTable.selectForUpdate(_forUpdate);
            select firstonly * from VehicleTable
            where VehicleTable.VehicleId == _vehicleId;
        }
        return VehicleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a vehicle record exists in the ConVMSVehicleTable by its ID.
    /// </summary>
    /// <param name="_vehicleId">The ID of the vehicle to check. Must not be null or empty.</param>
    /// <returns>
    /// True if a vehicle record with the specified ID exists; otherwise, false.
    /// </returns>
    public static boolean Exist(ConVMSVehicleId _vehicleId)
    {
        ConVMSVehicleTable VehicleTable;
        if (_vehicleId != '')
        {
            select firstonly RecId
            from VehicleTable
            where VehicleTable.VehicleId == _vehicleId;
        }
        return (VehicleTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field based on certain conditions.
    /// </summary>
    /// <param name="_fieldIdToCheck">The field ID to check.</param>
    /// <returns>
    /// Returns true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck) // Corrected from _fieldToCheck to _fieldIdToCheck
        {
            case fieldNum(ConVMSVehicleTable, AcquiredDate):
                Timezone clientTimeZone = DateTimeUtil::getClientMachineTimeZone();
                TransDate today = DateTimeUtil::getSystemDate(clientTimeZone);
            
                if (this.AcquiredDate < today)
                {
                    // The acquisition date must be today or later
                    ret = checkFailed("@ConVMS:AcqDateMustBeTodayOrLater");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@ConVMS:ConVMSVehicleTableHT</DeveloperDocumentation>
	<FormRef>ConVMSVehicleTable</FormRef>
	<Label>@ConVMS:ConVMSVehicleTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>VehicleId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VehicleIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>VehicleIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS104281</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ConVMSVehicleId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleGroupId</Name>
			<ExtendedDataType>ConVMSVehicleGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VehicleType</Name>
			<EnumType>ConVMSVehicleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehRegNum</Name>
			<AliasFor>VehicleId</AliasFor>
			<ExtendedDataType>ConVMSVehRegNum</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquiredDate</Name>
			<ExtendedDataType>ConVMSAcquiredDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VehicleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VehicleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VehicleGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VehicleGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ConVMSVehicleGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ConVMSVehicleGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleGroupId</Name>
					<Field>VehicleGroupId</Field>
					<RelatedField>VehicleGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>