<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConVMSVehicleServiceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConVMSVehicleServiceTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vehicle record in the ConVMSVehicleServiceTable by its ID.
    /// </summary>
    /// <param name="_ServiceId">The ID of the vehicle to find.</param>
    /// <param name="_forUpdate">Indicates whether the record should be locked for update. Default is false.</param>
    /// <returns>
    /// A ConVMSVehicleServiceTable record that matches the provided vehicle ID.
    /// If no record is found, returns null.
    /// </returns>
    public static ConVMSVehicleServiceTable Find(ConVMSVehicleServiceId _ServiceId, boolean _forUpdate = false)
    {
        ConVMSVehicleServiceTable ServiceTable;
        if (_ServiceId != '')
        {
            ServiceTable.selectForUpdate(_forUpdate);
            select firstonly * from ServiceTable
            where ServiceTable.VehicleId == _ServiceId;
        }
        return ServiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a vehicle record exists in the ConVMSVehicleServiceTable by its ID.
    /// </summary>
    /// <param name="_ServiceId">The ID of the vehicle to check. Must not be null or empty.</param>
    /// <returns>
    /// True if a vehicle record with the specified ID exists; otherwise, false.
    /// </returns>
    public static boolean Exist(ConVMSVehicleServiceId _ServiceId)
    {
        ConVMSVehicleServiceTable ServiceTable;
        if (_ServiceId != '')
        {
            select firstonly RecId
            from ServiceTable
            where ServiceTable.VehicleId == _ServiceId;
        }
        return (ServiceTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate write by checking whether service order true or falkse for write
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean ret;
        ret = super();
        ret = ret && this.CheckCanEdit();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckCanEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks based on can edit method whether service order can be changed or not
    /// </summary>
    /// <returns></returns>
    public boolean CheckCanEdit()
    {
        if (!this.CanEdit())
        {
            //Service order cannot be changed.
            return checkFailed("@ConVMS:SOchangeFailed");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CanEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current instance can be edited based on its service status.
    ///@return true if the service status is either None or Confirmed; otherwise, false.
    /// </summary>
    /// <returns></returns>
    public boolean CanEdit()
    {
        switch (this.ServiceStatus)
        {
            case ConVMSVehicleServiceStatus::None:
            case ConVMSVehicleServiceStatus::Confirmed:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitFromVehicleTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializing data from vehicle table
    /// </summary>
    /// <param name = "_vehicle"></param>
    public void InitFromVehicleTable(ConVMSVehicleTable _vehicle)
    {
        this.Name = _vehicle.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// checking whether field is modified or not
    /// </summary>
    /// <param name = "_fieldId"></param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch(_fieldId)
        {
            case fieldNum(ConVMSVehicleServiceTable, VehicleId):
                    this.InitFromVehicleTable(ConVMSVehicleTable::Find(this.VehicleId));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@ConVMS:ConVMSVehicleServiceTableHT</DeveloperDocumentation>
	<Label>@ConVMS:ConVMSVehicleServiceTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ServiceId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ServiceIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ServiceIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceDates</Name>
			<Label>@ConVMS:Servicedates</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceDateReq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceDateConfirmed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ConVMSVehicleServiceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleId</Name>
			<ExtendedDataType>ConVMSVehicleId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>ConVMSVehicleServiceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ServiceDateReq</Name>
			<ExtendedDataType>ConVMSVehicleServiceDateReq</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ServiceDateConfirmed</Name>
			<ExtendedDataType>ConVMSVehicleServiceDateConfirmed</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConVMSVehicleTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ConVMSVehicleTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleId</Name>
					<Field>VehicleId</Field>
					<RelatedField>VehicleId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>